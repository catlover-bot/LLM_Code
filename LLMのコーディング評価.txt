LLMのコーディング評価
　https://github.com/KuramitsuLab/jhuman-eval
　
IRCoder


プロンプトに自然言語仕様を入力∪ベンチマークを使用してみる
コーディングLLM
IRCoder（別のプログラミング言語に変換）


独自性
プロンプトエンジニアリング
　出来たら、コーディングLLMとIRCoderの統合（むず）

ファイルを入力∪テキスト


現段階
入力
LLM→評価
LLVM IR
IRCoder
異なるプログラミング言語


IRによる多言語移行を検討

 

・LLMをコンパイラとして扱ってみる 


//考えているシステムの統合を考えてみる
1.システムの全体設計(モジュールごとに分割)
1. **入力モジュール**:
   - 自然言語の入力を受け付け、LLMに指示を送る部分。
2. **コード生成モジュール**:
   - LLMを用いて自然言語からC言語のコードを生成する部分。
3. **LLVM IR変換モジュール**:
   - Clangを利用し、生成されたCコードをLLVM IRへ変換。
4. **多言語変換モジュール**:
   - IRCoderを用いてLLVM IRをターゲット言語に変換。
5. **出力モジュール**:
   - 生成されたコードをユーザーに返す部分。



### **2. 使用技術とツール**
- **LLM**:
  - GPTモデル（例えばOpenAI GPT-4や他のLLM）を使用して自然言語からコードを生成。
- **LLVMとClang**:
  - LLVMフレームワークのClangを利用してCコードからLLVM IRに変換。
- **IRCoder**:
  - LLVM IRを複数のプログラミング言語に変換するためのツール。
- **統合プラットフォーム**:
  - PythonやNode.jsを使用して各モジュールを統合。
  - Webベース（例えばFlaskやDjango）またはCLIベースのインターフェースを設計。



### **3. ワークフロー構築**
具体的なプロセスを流れとして設計します：

1. **ステップ 1: ユーザーから自然言語入力を取得**
   - 例: 「2つの整数を足し算するC言語コードを作成してください」

2. **ステップ 2: LLMがCコードを生成**
   - LLMモデルにリクエストを送り、Cコードを生成。
   - 出力例:
   ```c
   #include <stdio.h>
   int main() {
       int a, b;
       printf("Enter two numbers: ");
       scanf("%d %d", &a, &b);
       printf("Sum: %d\n", a + b);
       return 0;
   }
   ```
コードの説明文とコードを分けて保存・表示する。


3. **ステップ 3: LLVM IRに変換**
   - Clangを使用して生成されたCコードをLLVM IRに変換。
   - 変換コマンド例:
   ```bash
   clang -S -emit-llvm generated_code.c -o generated_code.ll
   ```

4. **ステップ 4: IRCoderでターゲット言語に変換**
   - LLVM IRをIRCoderに入力し、目的のプログラミング言語コードを生成。
   - 出力例（Pythonコード）:
   ```python
   print("Program executed successfully.")
   ```

   IRコードの利点
   ・特定のハードウェアやプラットフォームに依存しない
   ・IRコードは複数のプログラミング言語を統一的に扱う

5. **ステップ 5: ユーザーにコードを返却**
   - 最終コードをインターフェース（CLIまたはWeb）を通じて表示。

---


### **4. 統合の注意点**
- **エラーハンドリング**:
  - 変換プロセスの各段階でエラーハンドリングを実装（例: LLMがコードを生成できない場合やLLVM IR変換に失敗した場合）。
- **性能最適化**:
  - 処理速度を向上させるため、各モジュール間の通信を効率化（キャッシュ使用など）。
- **モジュールの相互テスト**:
  - 各モジュールを個別にテストし、その後統合したテストを実施。

---


### **5. 次のステップ**
1. フレームワークの各モジュール（自然言語入力、LLM、LLVM、IRCoder）のプロトタイプを作成。
2. 統合の実装を進め、全体の動作を確認。
3. 論文内で使用する具体例や成果を収集し、分析結果をまとめる。

---

固定の処理内容：テスト用で実行
自然数の中で100までの素数を出力する処理内容